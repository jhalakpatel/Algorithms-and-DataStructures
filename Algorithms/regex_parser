#include <iostream>
using namespace std;
#include <vector>
#include <limits>
#include <array>
#include <unordered_map>
#include <functional>
#include <utility>
#include <string>


bool isMHC(string text, int t, string pattern, int p) {
    
    if (t>=text.size()) {
        if (p>=pattern.size()) return true;    // both text and pattern are consumed
        if (p+1<pattern.size() && pattern[p+1]=='*'){    // 'c*' or '.*' can be zero
            return isMHC(text,t,pattern,p+2);
        } 
        return false;
    } else if (p>=pattern.size() && t<text.size()){    // no more pattern to match
        return false;
    } else if (p+1<pattern.size() && pattern[p+1]=='*') {    // '.*' or 'c*' 
        if (text[t]==pattern[p] || pattern[p]=='.') {
            // skip the wildcard completly, or go the next char with same pattern
            return isMHC(text,t,pattern,p+2) || isMHC(text,t+1,pattern,p);
        } else {
            return isMHC(text,t,pattern,p+2);    // complete skip the wild card 'c*' or '.*'
        }
    } else if (pattern[p]==text[t]||pattern[p]=='.') {
        return isMHC(text,t+1,pattern,p+1);
    } else {
        return false;
    }
}



bool isMatchHelper(string text, int t, string pattern, int p) {
    
    if (t>=text.size()&&p>=pattern.size()) return true;
    if (t>=text.size() || p>=pattern.size()) return false;
    
    
    if (text[t]==pattern[p]) {
        return isMatchHelper(text, t+1, pattern, p+1);
    } else {
        
        if (pattern[p]=='.') {
            return isMatchHelper(text, t+1, pattern, p+1);
        } else if (pattern[p]=='*') {
            
            // match with the prev char, basically shrink the "*"
            char prev = pattern[p-1];
            if (prev=='.') {
                prev = text[t-1];
            }
            
            if (text[t]==prev) {
                while(text[t]==prev){t++;}
        
                // once have matched all wild card character, continue
                return isMatchHelper(text, t, pattern, p+1);
            } else {
                return false;
            }
        } else {
            return false;
        }
        
    }
}


bool isMatch(string text, string pattern) {
    //return isMatchHelper(text, 0, pattern, 0);
    return isMHC(text,0,pattern,0);
}

int main() {
    string text = "aaaaaaab";
    string pattern = ".*";
    
    if (isMatch(text, pattern)) {
        cout << "its a match" << endl;
    } else {
        cout << "it does not match" << endl;
    }
        
    return 0;
}
